##
# Copyright 2017 Sam Wen.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create a multi-az, load balanced and autoscaled data service with code deploy support.
  
Parameters:

  VpcId:
    Default: ''
    Type: String
    Description: 'Optional, VpcId of your existing Virtual Private Cloud (VPC)'
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.

  Subnets:
    Default: ''
    Type: String
    Description: 'Optional, The list of two SubnetIds in your Virtual Private Cloud (VPC)'
    ConstraintDescription: >-
      must be a list of two existing subnets associated with at different availability zones. 
      They should be residing in the selected VPC.

  InstanceType:
    Description: Dataservice Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    
  NotificationTopic:
    Default: ''
    Type: String
    Description: 'Optional, SNS Notification Topic, enter an existing one.'

  ResourcesStackName:
    Default: resources
    Description: Resources Stack Name
    Type: String
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9\-]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters and -.

  S3Bucket:
    Default: ''
    Description: 'Optional, S3 bucket name for the data service.'
    Type: String

  InstanceRole:
    Default: ''
    Description: 'Optional, instance role for accessing resources.'
    Type: String

  InstanceProfile:
    Default: ''
    Description: 'Optional, instance profile.'
    Type: String

  KeyName:
    Default: ''
    Description: >-
      Optional, name of an existing EC2 KeyPair to enable SSH access to the
      instance
    Type: String
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHLocation:
    Description: 'Optional, IP address range that can be used to SSH to the EC2 instances'
    Type: String
    Default: ''
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DefaultSecurityGroup:
    Default: ''
    Description: 'Optional, Default Security group'
    Type: String

  CodeDeployRoleArn:
    Default: ''
    Type: String
    Description: 'Optional, CodeDeploy Role Arn, enter an existing one.'

  CodeDeployAppName:
    Default: ''
    Type: String
    Description: 'Optional, CodeDeploy Application Name, enter an existing one.'

Conditions:

  ImportVpcId: !Equals 
    - !Ref VpcId
    - ''

  ImportSubnets: !Equals 
    - !Ref Subnets
    - ''

  ImportKeyName: !Equals 
    - !Ref KeyName
    - ''

  ImportInstanceRole: !Equals 
    - !Ref InstanceRole
    - ''

  ImportInstanceProfile: !Equals 
    - !Ref InstanceProfile
    - ''

  ImportS3Bucket: !Equals 
    - !Ref S3Bucket
    - ''

  ImportSSHLocation: !Equals 
    - !Ref SSHLocation
    - ''

  ImportDefaultSecurityGroup: !Equals 
    - !Ref DefaultSecurityGroup
    - ''

  ImportCodeDeployRoleArn: !Equals 
    - !Ref CodeDeployRoleArn
    - ''

  ImportCodeDeployAppName: !Equals 
    - !Ref CodeDeployAppName
    - ''

  ImportNotificationTopic: !Equals 
    - !Ref NotificationTopic
    - ''

Mappings:

  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64

  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64

  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-c5eadcd3
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-aaebfcd3
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-68002c08
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-f9dd458a
      HVMG2: ami-ed947194
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-886369ec
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-ea26ce85
      HVMG2: ami-cf3294a0
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-374db956
      HVMG2: ami-4e0e1f29
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-a59b49c6
      HVMG2: ami-f35cd290
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-dc361ebf
      HVMG2: ami-e77c6f84
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-ffbdd790
      HVMG2: ami-5b6e1034
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-730ebd17
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED

Resources:

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Split 
        - ', '
        - !If 
          - ImportSubnets
          - !ImportValue 
            'Fn::Sub': '${ResourcesStackName}-Subnets'
          - !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      DesiredCapacity: '2'
      MinSize: '2'
      MaxSize: '8'
      TargetGroupARNs:
        - !Ref TargetGroup
      NotificationConfiguration:
        TopicARN: !If 
          - ImportNotificationTopic
          - !ImportValue 
            'Fn::Sub': '${ResourcesStackName}-NotificationTopic'
          - !Ref NotificationTopic
        NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH'
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      Tags:
        - Key: Name
          Value: Dataservice Server
          PropagateAtLaunch: 'true'
        - Key: CodeDeploy
          Value: 'TRUE'
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '2'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Install dataservice server
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: s3
          buckets:
            - !If 
              - ImportS3Bucket
              - !ImportValue 
                'Fn::Sub': '${ResourcesStackName}-S3Bucket'
              - !Ref S3Bucket
          roleName: !If 
            - ImportInstanceRole
            - !ImportValue 
              'Fn::Sub': '${ResourcesStackName}-InstanceRole'
            - !Ref InstanceRole
      'AWS::CloudFormation::Init':
        services:
          sysvinit:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    Properties:
      IamInstanceProfile: !If 
        - ImportInstanceProfile
        - !ImportValue 
          'Fn::Sub': '${ResourcesStackName}-InstanceProfile'
        - !Ref InstanceProfile
      KeyName: !If 
        - ImportKeyName
        - !ImportValue 
          'Fn::Sub': '${ResourcesStackName}-KeyName'
        - !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      SecurityGroups:
        - !If 
          - ImportDefaultSecurityGroup
          - !ImportValue 
            'Fn::Sub': '${ResourcesStackName}-DefaultSecurityGroup'
          - !Ref DefaultSecurityGroup
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |+

            - stack=
            - !Ref 'AWS::StackId'
            - |+

            - region=
            - !Ref 'AWS::Region'
            - |+

            - |
              yum update -y
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum update -y aws-cli
            - |+

            - |
              # helper function
            - |
              function fn_exit
            - |
              {
            - |2
                /opt/aws/bin/cfn-signal --exit-code $1 --stack $stack --resource AutoScalingGroup --region $region
            - |2
                exit $1
            - |
              }
            - |+

            - |
              # install the AWS CodeDeploy Agent
            - |
              aws configure set default.s3.signature_version s3v4 \
            - |2
                || fn_exit $?
            - |+

            - |
              cd /tmp
            - |+

            - >
              aws s3 cp s3://aws-codedeploy-${region}/latest/codedeploy-agent.noarch.rpm . --region $region \
            - |2
                || fn_exit $? 'Failed to download AWS CodeDeploy Agent.'
            - |+

            - |
              yum -y install codedeploy-agent.noarch.rpm \
            - |2
                || fn_exit $?
            - |+

            - |
              rm -f codedeploy-agent.noarch.rpm
            - |+

            - |
              # run cfn-init
            - |
              /opt/aws/bin/cfn-init -v --stack $stack --resource LaunchConfig --region $region
            - |+

            - |
              # signal result.
            - |
              fn_exit $?

  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'

  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 70% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions:
        - !Ref ScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 15 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '3'
      Threshold: '40'
      AlarmActions:
        - !Ref ScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: DataserviceLoadBalancer
# for test and demo 
      Scheme: internet-facing
# for prodouction 
#      Scheme: internal
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Split 
        - ', '
        - !If 
          - ImportSubnets
          - !ImportValue 
            'Fn::Sub': '${ResourcesStackName}-Subnets'
          - !Ref Subnets
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !If 
            - ImportS3Bucket
            - !ImportValue 
              'Fn::Sub': '${ResourcesStackName}-S3Bucket'
            - !Ref S3Bucket

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: DataserviceTargetGroup
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080
      HealthCheckPath: /ds/v1
      Protocol: HTTP
      Port: 8080
      VpcId: !If 
        - ImportVpcId
        - !ImportValue 
          'Fn::Sub': '${ResourcesStackName}-VpcId'
        - !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable http access by all via port 80 depends on LoadBalancer scheme
      VpcId: !If 
        - ImportVpcId
        - !ImportValue 
          'Fn::Sub': '${ResourcesStackName}-VpcId'
        - !Ref VpcId
      Tags:
        - Key: Name
          Value: Dataservice Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIpv6: '::/0'

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable http access by user via port 8080
      VpcId: !If 
        - ImportVpcId
        - !ImportValue 
          'Fn::Sub': '${ResourcesStackName}-VpcId'
        - !Ref VpcId
      Tags:
        - Key: Name
          Value: Dataservice Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !If 
            - ImportSSHLocation
            - !ImportValue 
              'Fn::Sub': '${ResourcesStackName}-SSHLocation'
            - !Ref SSHLocation

  DeploymentGroupInstall:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      DeploymentGroupName: Dataservice-CDG-Install
      ApplicationName: !If 
        - ImportCodeDeployAppName
        - !ImportValue 
          'Fn::Sub': '${ResourcesStackName}-CodeDeployAppName'
        - !Ref CodeDeployAppName
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key: Name
          Value: Dataservice Server
        - Type: KEY_AND_VALUE
          Key: CodeDeploy
          Value: 'TRUE'
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      ServiceRoleArn: !If
        - ImportCodeDeployRoleArn
        - !ImportValue 
          'Fn::Sub': '${ResourcesStackName}-CodeDeployRoleArn'
        - !Ref CodeDeployRoleArn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      TriggerConfigurations:
        - TriggerEvents:
            - DeploymentStart
            - DeploymentSuccess
            - DeploymentFailure
            - DeploymentStop
            - DeploymentRollback
            - InstanceFailure
          TriggerName: DeploymentStatus
          TriggerTargetArn: !If 
            - ImportNotificationTopic
            - !ImportValue 
              'Fn::Sub': '${ResourcesStackName}-NotificationTopic'
            - !Ref NotificationTopic
      Deployment:
        Description: First time installation
        IgnoreApplicationStopFailures: 'true'
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !If 
              - ImportS3Bucket
              - !ImportValue
                'Fn::Sub': '${ResourcesStackName}-S3Bucket'
              - !Ref S3Bucket
            BundleType: zip
            Key: deployment/cd-install.zip

  StopUpdateAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Do not start update if CPU > 30% for last 30 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '6'
      Threshold: '30'
      ComparisonOperator: GreaterThanThreshold

# move DeploymentGroupUpdate to aws cli due to Cloudformation not ready yet Sam @ 8/25/2017
#  DeploymentGroupUpdate:
#    Type: "AWS::CodeDeploy::DeploymentGroup"

Outputs:

  URL:
    Description: The URL of Dataservice APIs - If Scheme is internal, the url is not accessible from public internet
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - LoadBalancer
          - DNSName
        - /ds/v1
    Export:
      Name: !Sub '${AWS::StackName}-URL'

  DeploymentGroupInstall:
    Description: deployment group name for installing all at once
    Value: !Ref  DeploymentGroupInstall
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentGroupInstall'

  AutoScalingGroup:
    Description: auto scaling group for create update deployment group
    Value: !Ref  AutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingGroup'

  LoadBalanceTargetGroup:
    Description: load balance target group for create update deployment group
    Value: !Ref  TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalanceTargetGroup'
  